diff --git a/Original/src/afl-fuzz-queue.c b/IgorFuzz/src/afl-fuzz-queue.c
index 6693863..7b669e2 100755
--- a/Original/src/afl-fuzz-queue.c
+++ b/IgorFuzz/src/afl-fuzz-queue.c
@@ -631,78 +631,77 @@ void update_bitmap_score(afl_state_t *afl, struct queue_entry *q) {
 
 /* The second part of the mechanism discussed above is a routine that
    goes over afl->top_rated[] entries, and then sequentially grabs winners for
-   previously-unseen bytes (temp_v) and marks them as favored, at least
+   previously-unseen bytes (trace_mini_favored) and marks them as favored, at least
    until the next run. The favored entries are given more air time during
    all fuzzing steps. */
 
 void cull_queue(afl_state_t *afl) {
 
-  if (likely(!afl->score_changed || afl->non_instrumented_mode)) { return; }
+    if (likely(!afl->score_changed || afl->non_instrumented_mode)) { return; }
 
-  struct queue_entry *q;
-  u32                 len = (afl->fsrv.map_size >> 3);
-  u32                 i;
-  u8 *                temp_v = afl->map_tmp_buf;
+    struct queue_entry *q;
+    u32                 len = (afl->fsrv.map_size >> 3);
+    u32                 i;
+    u8 *                temp_v = afl->map_tmp_buf;
 
-  afl->score_changed = 0;
+    afl->score_changed = 0;
 
-  memset(temp_v, 255, len);
+    memset(temp_v, 255, len);
 
-  afl->queued_favored = 0;
-  afl->pending_favored = 0;
+    afl->queued_favored = 0;
+    afl->pending_favored = 0;
 
-  q = afl->queue;
+    q = afl->queue;
 
-  while (q) {
+    while (q) {
 
-    q->favored = 0;
-    q = q->next;
+        q->favored = 0;
+        q = q->next;
 
-  }
+    }
 
-  /* Let's see if anything in the bitmap isn't captured in temp_v.
-     If yes, and if it has a afl->top_rated[] contender, let's use it. */
+    /* Let's see if anything in the bitmap isn't captured in temp_v.
+       If yes, and if it has a afl->top_rated[] contender, let's use it. */
 
-  for (i = 0; i < afl->fsrv.map_size; ++i) {
+    for (i = 0; i < afl->fsrv.map_size; ++i) {
 
-    if (afl->top_rated[i] && (temp_v[i >> 3] & (1 << (i & 7)))) {
+        if (afl->top_rated[i] && (temp_v[i >> 3] & (1 << (i & 7)))) {
 
-      u32 j = len;
+            u32 j = len;
 
-      /* Remove all bits belonging to the current entry from temp_v. */
+            /* Remove all bits belonging to the current entry from temp_v. */
 
-      while (j--) {
+            while (j--) {
+                if ((afl->top_rated[i]->trace_mini[j] ^ trace_mini_ori[j]) & trace_mini_ori[j]) {
 
-        if (afl->top_rated[i]->trace_mini[j]) {
+                    temp_v[j] &= ~((afl->top_rated[i]->trace_mini[j] ^ trace_mini_ori[j]) & trace_mini_ori[j]);
 
-          temp_v[j] &= ~afl->top_rated[i]->trace_mini[j];
+                }
 
-        }
+            }
 
-      }
+            afl->top_rated[i]->favored = 1;
+            ++afl->queued_favored;
 
-      afl->top_rated[i]->favored = 1;
-      ++afl->queued_favored;
+            if (afl->top_rated[i]->fuzz_level == 0 ||
+                !afl->top_rated[i]->was_fuzzed) {
 
-      if (afl->top_rated[i]->fuzz_level == 0 ||
-          !afl->top_rated[i]->was_fuzzed) {
+                ++afl->pending_favored;
 
-        ++afl->pending_favored;
+            }
 
-      }
+        }
 
     }
 
-  }
-
-  q = afl->queue;
+    q = afl->queue;
 
-  while (q) {
+    while (q) {
 
-    mark_as_redundant(afl, q, !q->favored);
-    q = q->next;
+        mark_as_redundant(afl, q, !q->favored);
+        q = q->next;
 
-  }
+    }
 
 }
 
@@ -762,7 +761,7 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   /* Adjust score based on bitmap size. The working theory is that better
      coverage translates to better targets. Multiplier from 0.25x to 3x. */
-
+  /* origin version
   if (q->bitmap_size * 0.3 > avg_bitmap_size) {
 
     perf_score *= 3;
@@ -787,8 +786,13 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
     perf_score *= 0.75;
 
-  }
-
+  } */
+  if (q->bitmap_size * 0.3 > avg_bitmap_size) perf_score *= 0.25;
+  else if (q->bitmap_size * 0.5 > avg_bitmap_size) perf_score *= 0.5;
+  else if (q->bitmap_size * 0.75 > avg_bitmap_size) perf_score *= 0.75;
+  else if (q->bitmap_size * 3 < avg_bitmap_size) perf_score *= 3;
+  else if (q->bitmap_size * 2 < avg_bitmap_size) perf_score *= 2;
+  else if (q->bitmap_size * 1.5 < avg_bitmap_size) perf_score *= 1.5;
   /* Adjust score based on handicap. Handicap is proportional to how late
      in the game we learned about this path. Latecomers are allowed to run
      for a bit longer until they catch up with the rest. */
